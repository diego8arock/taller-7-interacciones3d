[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 0, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeColorConstant" id=2]
constant = Color( 0.857679, 0.899536, 0.0292388, 1 )

[sub_resource type="VisualShader" id=3]
code = "shader_type spatial;



void vertex() {
// Output:0

}

void fragment() {
// Color:3
	vec3 n_out3p0;
	float n_out3p1;
	n_out3p0 = vec3(0.857679,0.899536,0.029239);
	n_out3p1 = 1.000000;

// VectorOp:2
	vec3 n_in2p1 = vec3(1.00000,0.00000,0.00000);
	vec3 n_out2p0;
	n_out2p0 = n_out3p0 - n_in2p1;

// Output:0
	ALBEDO = n_out3p0;
	ALPHA = dot(n_out2p0,vec3(0.333333,0.333333,0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -633.321, 113.719 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 57.6789, 263.719 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -240, 200 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 3, 0, 0, 0, 2, 0, 0, 1 )

[resource]
shader = SubResource( 3 )
